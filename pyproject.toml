[build-system]
requires = ["setuptools>=45", "wheel", "setuptools-scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "when-trade"
version = "1.0.0"
description = "When.Trade - Intelligent Trading Timing Analysis Platform"
readme = "README.md"
license = "MIT"
authors = [
    {name = "When.Trade Team", email = "team@when.trade"}
]
maintainers = [
    {name = "When.Trade Team", email = "team@when.trade"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["trading", "analysis", "timing", "cryptocurrency", "AI"]
requires-python = ">=3.9"

dependencies = [
    # Core Framework
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.22.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    
    # Async Support
    "asyncio-mqtt>=0.13.0",
    "aiohttp>=3.8.0",
    "aiofiles>=23.0.0",
    
    # Monitoring & Logging
    "structlog>=23.0.0",
    "rich>=13.0.0",
    
    # Configuration
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0",
    "toml>=0.10.0",
    
    # WebSocket Support
    "websockets>=11.0.0",
    
    # AI & ML (for future use)
    "openai>=1.0.0",
    "anthropic>=0.3.0",
    "tiktoken>=0.5.0",
    
    # Crypto & Trading (for future use)
    "ccxt>=4.0.0",
    
    # Utilities
    "httpx>=0.24.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.4.0",
    "pre-commit>=3.3.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "httpx>=0.24.0",
    "factory-boy>=3.2.0",
]

docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-swagger-ui-tag>=0.6.0",
]

[project.urls]
Homepage = "https://when.trade"
Documentation = "https://docs.when.trade"
Repository = "https://github.com/when-trade/platform"
"Bug Tracker" = "https://github.com/when-trade/platform/issues"

[project.scripts]
when-trade = "api.main:main"

[tool.setuptools]
packages = ["api", "core", "configs"]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.toml", "*.cfg", "*.ini"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | web/node_modules
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["api", "core", "configs"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ccxt.*",
    "websockets.*",
    "uvicorn.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["api", "core"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
 
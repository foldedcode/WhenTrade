from typing import Annotated, Sequence, List, Dict
from datetime import date, timedelta, datetime
from typing_extensions import TypedDict, Optional
from langchain_openai import ChatOpenAI
from langchain_core.messages import AnyMessage
from langgraph.graph import add_messages
from core.agents import *
from langgraph.prebuilt import ToolNode
from langgraph.graph import END, StateGraph, START, MessagesState

# 导入统一日志系统
from core.utils.logging_init import get_logger
logger = get_logger("default")


# Linus-style: Single data structure for debate turns
class DebateTurn(TypedDict):
    speaker: str  # Agent name (bull, bear, risky, safe, neutral)
    content: str  # What was said
    turn: int  # Turn number in the debate
    timestamp: Optional[datetime]  # When it was said


# Researcher team state - simplified with single source of truth
class InvestDebateState(TypedDict):
    debate_turns: Annotated[List[DebateTurn], "All debate turns in order"]
    judge_decision: Annotated[str, "Final judge decision"]
    count: Annotated[int, "Number of debate turns"]
    
    # Deprecated fields - kept for compatibility but will be removed
    bull_history: Annotated[str, "DEPRECATED - use debate_turns"]
    bear_history: Annotated[str, "DEPRECATED - use debate_turns"]
    history: Annotated[str, "DEPRECATED - use debate_turns"]
    current_response: Annotated[str, "DEPRECATED - use debate_turns[-1]"]


# Risk management team state - simplified with single source of truth
class RiskDebateState(TypedDict):
    debate_turns: Annotated[List[DebateTurn], "All debate turns in order"]
    latest_speaker: Annotated[str, "Analyst that spoke last"]
    judge_decision: Annotated[str, "Judge's decision"]
    count: Annotated[int, "Number of debate turns"]
    
    # Deprecated fields - kept for compatibility but will be removed
    risky_history: Annotated[str, "DEPRECATED - use debate_turns"]
    safe_history: Annotated[str, "DEPRECATED - use debate_turns"]
    neutral_history: Annotated[str, "DEPRECATED - use debate_turns"]
    history: Annotated[str, "DEPRECATED - use debate_turns"]
    current_risky_response: Annotated[str, "DEPRECATED - use get_last_turn('risky')"]
    current_safe_response: Annotated[str, "DEPRECATED - use get_last_turn('safe')"]
    current_neutral_response: Annotated[str, "DEPRECATED - use get_last_turn('neutral')"]


class WTAgentState(MessagesState):
    company_of_interest: Annotated[str, "Company that we are interested in trading"]
    trade_date: Annotated[str, "What date we are trading at"]
    timeframe: Annotated[str, "Time range for analysis (1h, 4h, 1d, 1w, 1M)"] = "1d"
    
    # Multi-language support - core data structure addition (Linus: eliminate special cases)
    language: Annotated[str, "Language preference for all generated messages"] = "zh-CN"
    
    # Phase 2: User-selected tools and data sources
    selected_tools: Annotated[List[str], "User-selected analysis tools"] = []
    selected_data_sources: Annotated[List[str], "User-selected data sources"] = []

    sender: Annotated[str, "Agent that sent this message"]
    
    # WebSocket session tracking
    analysis_id: Annotated[Optional[str], "WebSocket analysis session ID for Redis events"] = None
    
    # 序列执行控制机制 (Linus: single source of truth for execution order)
    current_sequence: Annotated[Optional[str], "Currently executing agent sequence"] = None
    sequence_lock: Annotated[bool, "Lock to ensure sequential execution"] = False

    # research step
    market_report: Annotated[str, "Report from the Market Analyst"]
    sentiment_report: Annotated[str, "Report from the Social Media Analyst"]
    news_report: Annotated[
        str, "Report from the News Researcher of current world affairs"
    ]

    # researcher team discussion step
    investment_debate_state: Annotated[
        InvestDebateState, "Current state of the debate on if to invest or not"
    ]
    investment_plan: Annotated[str, "Plan generated by the Analyst"]

    trader_investment_plan: Annotated[str, "Plan generated by the Trader"]

    # risk management team discussion step
    risk_debate_state: Annotated[
        RiskDebateState, "Current state of the debate on evaluating risk"
    ]
    final_trade_decision: Annotated[str, "Final decision made by the Risk Analysts"]

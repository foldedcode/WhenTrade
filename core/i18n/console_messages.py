"""控制台输出多语言消息管理

统一管理所有控制台输出、日志记录和错误信息的多语言内容。
消除硬编码中文字符串，支持动态语言切换。
"""

from typing import Dict, Any, Optional
from .locale_manager import LocaleManager

# 控制台输出消息定义
CONSOLE_MESSAGES = {
    "en": {
        # 系统启动和初始化
        "system": {
            "startup": "System starting up...",
            "shutdown": "System shutting down...",
            "initialization_complete": "Initialization complete",
            "initialization_failed": "Initialization failed",
            "service_started": "Service started",
            "service_stopped": "Service stopped",
            "configuration_loaded": "Configuration loaded",
            "configuration_failed": "Configuration loading failed"
        },
        
        # 缓存相关
        "cache": {
            "hit": "Cache hit",
            "miss": "Cache miss",
            "saved": "Cache saved",
            "cleared": "Cache cleared",
            "prewarming": "Cache prewarming",
            "prewarming_complete": "Cache prewarming complete",
            "prewarming_failed": "Cache prewarming failed",
            "cleanup_complete": "Cache cleanup complete",
            "cleanup_failed": "Cache cleanup failed",
            "user_cached": "User information cached",
            "user_retrieved": "User retrieved from cache",
            "user_cleared": "User cache cleared",
            "task_cached": "Analysis task cached",
            "task_retrieved": "Analysis task retrieved from cache",
            "task_cleared": "Task cache cleared",
            "report_cached": "Analysis report cached",
            "report_retrieved": "Analysis report retrieved from cache",
            "market_data_cached": "Market data cached",
            "user_stats_cached": "User statistics cached",
            "batch_cached": "Batch cached",
            "batch_cleared": "Batch cache cleared",
            "sync_complete": "Data synchronization complete",
            "sync_failed": "Data synchronization failed",
            "hit_rate_low": "Cache hit rate is low",
            "optimization_complete": "Cache optimization complete"
        },
        
        # 数据库相关
        "database": {
            "connected": "Database connected",
            "disconnected": "Database disconnected",
            "connection_failed": "Database connection failed",
            "query_slow": "Slow query detected",
            "deadlock_detected": "Database deadlock detected",
            "optimization_complete": "Database optimization complete",
            "maintenance_complete": "Database maintenance complete",
            "maintenance_failed": "Database maintenance failed",
            "stats_updated": "Database statistics updated",
            "cache_cleared": "Query cache cleared",
            "pool_usage_high": "Connection pool usage is high",
            "pool_overflow": "Connection pool overflow",
            "engine_created": "Database engine created",
            "engine_closed": "Database engine closed",
            "health_check_failed": "Database health check failed",
            "connection_invalid": "Database connection invalid"
        },
        
        # API和网络相关
        "api": {
            "rate_limit": "Rate limit: waiting",
            "rate_limit_detected": "Rate limit error detected",
            "pro_endpoint_restricted": "Pro API endpoint access restricted",
            "api_key_issue": "API key issue",
            "request_failed": "API request failed",
            "request_success": "API request successful",
            "fallback_switching": "Switching to fallback data source",
            "fallback_success": "Fallback data source successful",
            "fallback_failed": "Fallback data source failed",
            "no_fallback": "No fallback data source available",
            "primary_success": "Primary data source successful",
            "primary_failed": "Primary data source failed",
            "cache_cleared": "API cache cleared",
            "interval_control": "API interval control: waiting",
            "stop_signal_received": "Stop signal received during execution",
            "execution_interrupted": "Execution interrupted"
        },
        
        # 分析和处理相关
        "analysis": {
            "started": "Analysis started",
            "completed": "Analysis completed",
            "failed": "Analysis failed",
            "cancelled": "Analysis cancelled",
            "progress_updated": "Analysis progress updated",
            "report_generated": "Analysis report generated",
            "scope_mapping": "Analysis scope mapping",
            "scope_unrecognized": "Unrecognized analysis scope",
            "agents_selected": "Agents selected",
            "no_agents_selected": "No agents selected",
            "execution_order_adjusted": "Execution order adjusted",
            "graph_initialized": "Analysis graph initialized",
            "graph_failed": "Analysis graph initialization failed",
            "phase_activated": "Phase activated",
            "agent_status_updated": "Agent status updated",
            "tool_called": "Tool called",
            "debate_count_updated": "Debate count updated",
            "risk_count_updated": "Risk count updated",
            "stream_started": "Stream started",
            "stream_completed": "Stream completed",
            "stream_failed": "Stream failed",
            "stream_cancelled": "Stream cancelled",
            "chunk_received": "Chunk received",
            "stop_event_set": "Stop event set for task"
        },
        
        # 工具相关
        "tools": {
            "optimizer_initialized": "Tool call optimizer initialized",
            "optimizer_started": "Tool call optimizer started",
            "optimizer_stopped": "Tool call optimizer stopped",
            "call_submitted": "Tool call submitted",
            "call_completed": "Tool call completed",
            "call_failed": "Tool call failed",
            "call_executing": "Tool call executing",
            "work_loop_cancelled": "Tool call optimizer work loop cancelled",
            "work_loop_error": "Tool call optimizer work loop error",
            "status_notification": "Tool status notification",
            "status_notification_failed": "Tool status notification failed"
        },
        
        # LLM相关
        "llm": {
            "token_tracking_enabled": "Token tracking enabled",
            "token_tracking_disabled": "Token tracking disabled",
            "token_estimated": "Using estimated tokens",
            "token_actual": "Actual token usage",
            "cost_calculated": "Cost calculated",
            "cost_zero_warning": "Cost calculation is 0, possible configuration issue",
            "usage_record_created": "Usage record created",
            "usage_record_failed": "Usage record creation failed",
            "token_stats_failed": "Token statistics failed",
            "call_failed": "LLM call failed",
            "chat_request_failed": "LLM chat completion request failed",
            "stream_parse_failed": "Unable to parse streaming response",
            "stream_request_failed": "LLM streaming chat request failed",
            "api_key_missing": "API key not set, chat functionality unavailable",
            "providers_unavailable": "No available LLM providers, unable to proceed with analysis",
            "availability_check_failed": "LLM availability check failed",
            "detection_api_unavailable": "Backend LLM detection API unavailable, using local detection",
            "detection_failed": "LLM detection failed, using default configuration",
            "detection_completed": "LLM detection completed, available providers",
            "model_list_failed": "Unable to get model list, using default configuration",
            "provider_translation_failed": "Failed to get provider translation",
            "model_list_request_failed": "Failed to get model list"
        },
        
        # 任务和队列相关
        "task": {
            "added_to_queue": "Task added to queue",
            "concurrency_limit": "Task reached concurrency limit, waiting",
            "timeout": "Task timeout",
            "execution_failed": "Task execution failed",
            "retry": "Task retry",
            "started": "Task started",
            "completed": "Task completed",
            "queue_error": "Task queue processing error",
            "result_failed": "Failed to get task result",
            "queue_closing": "Closing task queue",
            "queue_closed": "Task queue closed",
            "template_registered": "Task template registered",
            "optimization_rule_failed": "Failed to apply optimization rule",
            "optimized_submitted": "Task optimized and submitted",
            "optimizer_started": "Task optimizer started",
            "queue_backlog": "Task queue backlog",
            "execution_time_long": "Average task execution time is too long",
            "queue_stats": "Task queue statistics",
            "performance_monitoring_error": "Task performance monitoring error",
            "optimizer_closing": "Closing task optimizer",
            "optimizer_closed": "Task optimizer closed",
            "batch_completed": "Batch processing completed",
            "batch_failed": "Batch processing failed"
        },
        
        # 备份相关
        "backup": {
            "s3_client_initialized": "S3 backup client initialized successfully",
            "s3_client_failed": "S3 backup client initialization failed",
            "boto3_unavailable": "boto3 not installed, S3 backup functionality unavailable",
            "postgresql_started": "Starting PostgreSQL database backup",
            "redis_started": "Starting Redis cache backup",
            "config_started": "Starting configuration file backup",
            "completed": "Backup completed",
            "failed": "Backup failed",
            "postgresql_success": "PostgreSQL backup successful",
            "postgresql_failed": "PostgreSQL backup failed",
            "postgresql_error": "PostgreSQL backup error",
            "redis_client_uninitialized": "Redis client not initialized, skipping Redis backup",
            "redis_key_failed": "Failed to backup Redis key",
            "redis_success": "Redis backup successful",
            "redis_error": "Redis backup error",
            "config_success": "Configuration backup successful",
            "config_error": "Configuration backup error",
            "s3_upload_success": "File uploaded to S3 successfully",
            "s3_upload_completed": "Backup upload to S3 completed",
            "s3_upload_failed": "S3 upload failed",
            "old_backup_deleted": "Old backup deleted",
            "old_backup_delete_failed": "Failed to delete old backup",
            "cleanup_error": "Cleanup old backups error",
            "s3_old_backup_deleted": "S3 old backup deleted",
            "s3_cleanup_error": "S3 old backup cleanup error",
            "manifest_read_failed": "Failed to read backup manifest",
            "s3_list_failed": "Failed to list S3 backups",
            "list_error": "List backups error",
            "s3_list_error": "List S3 backups error",
            "restore_completed": "Backup restore completed",
            "restore_failed": "Backup restore failed",
            "postgresql_restore_manual": "PostgreSQL restore functionality requires manual implementation",
            "postgresql_restore_error": "PostgreSQL restore error",
            "redis_client_uninitialized_restore": "Redis client not initialized",
            "redis_restore_completed": "Redis data restore completed",
            "redis_restore_error": "Redis restore error",
            "config_restore_info": "Configuration backup information",
            "config_restore_completed": "Configuration restore completed (for reference only)",
            "config_restore_error": "Configuration restore error",
            "s3_download_completed": "Download backup from S3 completed",
            "s3_download_failed": "Failed to download backup from S3",
            "next_backup_time": "Next backup time",
            "scheduled_backup_started": "Starting scheduled backup",
            "scheduled_backup_completed": "Scheduled backup completed",
            "scheduled_backup_failed": "Scheduled backup failed",
            "scheduled_backup_error": "Scheduled backup error"
        },
        
        # 监控相关
        "monitoring": {
            "slow_request": "Slow request",
            "slow_query": "Slow query",
            "cpu_usage_high": "CPU usage is high",
            "memory_usage_high": "Memory usage is high",
            "record_metrics_failed": "Failed to record system metrics",
            "cache_hit_rate_low": "Cache hit rate is low",
            "slow_query_analysis_failed": "Failed to analyze slow queries",
            "table_stats_failed": "Failed to get table statistics",
            "index_usage_failed": "Failed to get index usage",
            "performance_analysis_failed": "Performance analysis failed",
            "db_stats_updated": "Database statistics updated",
            "db_connection_optimization_failed": "Failed to optimize database connections",
            "cache_prewarming_completed": "Cache prewarming completed",
            "cache_prewarming_failed": "Cache prewarming failed",
            "performance_summary": "Performance summary",
            "performance_monitoring_error": "Performance monitoring error"
        },
        
        # 新闻和数据相关
        "news": {
            "search_failed": "News search failed",
            "found_articles": "Found news articles about",
            "analysis_failed": "News analysis failed",
            "summary_generation_failed": "Failed to generate summary report",
            "service_initialized": "CryptoSwarmNewsService initialized",
            "analysis_started": "Starting news analysis",
            "search_agent_started": "Search agent started",
            "no_news_found": "No news found about",
            "analysis_agent_started": "Analysis agent started, processing news",
            "summary_agent_generating": "Summary agent generating final report",
            "analysis_report_generated": "Successfully generated news analysis report",
            "crypto_news_analysis_failed": "Failed to get cryptocurrency news analysis",
            "connection_test_failed": "Connection test failed"
        },
        
        # 数据文件相关
        "data": {
            "file_not_exists": "Data file does not exist",
            "check_data_directory": "Please ensure data is downloaded or check data directory configuration",
            "file_not_found": "File not found",
            "json_parse_error": "JSON parsing error",
            "read_error": "Error occurred while reading data file",
            "connection_timeout": "Connection timeout"
        },
        
        # Agent映射相关
        "agent_mapping": {
            "market_enum_default": "market_enum (default)",
            "available_agent_keys": "Available agent mapping keys",
            "check_scope": "Check scope",
            "found_agents_for_scope": "Found agents for scope",
            "add_agent": "Add agent",
            "scope_not_found": "Scope not found corresponding agents",
            "final_selected_agents": "Final selected agents",
            "no_matching_agents": "No matching agents found, using default configuration",
            "organizing_crypto_agents": "Organizing crypto market agents",
            "analyst_team_will_include": "Analyst team will include agents",
            "final_organization_result": "Final organization result"
        },
        
        # 协作相关
        "collaboration": {
            "started": "Collaboration started",
            "not_found": "Collaboration not found"
        },
        
        # WebSocket相关
        "websocket": {
            "not_connected": "WebSocket not connected, need to establish connection first through connectWithAuth method",
            "analysis_id_empty": "subscribeToAnalysis: analysisId cannot be empty",
            "subscribe_message_sent": "Subscription message sent",
            "subscribe_message_failed": "Failed to send subscription message",
            "heartbeat_failed": "Heartbeat send failed",
            "empty_message_ignored": "Received empty message, ignoring processing",
            "json_parse_failed": "JSON parsing failed",
            "message_format_error": "Message format error: expected dictionary",
            "message_missing_type": "Message missing type field",
            "dev_mode_analysis_id": "Dev mode: generated new analysis_id",
            "deprecated_analysis_start": "Received deprecated analysis.start message, should use REST API to create task",
            "websocket_disconnected": "WebSocket disconnected",
            "websocket_error": "WebSocket error",
            "forward_redis_message": "Forward Redis message to WebSocket",
            "forward_message_failed": "Failed to forward message",
            "created_independent_subscriber": "Created independent subscriber, subscribed to channel",
            "using_subscription_message_params": "Directly using subscription message parameters",
            "subscription_missing_symbol": "Subscription message missing required parameter 'symbol'",
            "received_complete_params": "Received complete parameters",
            "top_level_keys": "Top level keys",
            "analysis_scopes_position_check": "analysis_scopes position check",
            "using_llm_config": "Using LLM configuration",
            "received_analysis_scopes": "Received analysis scopes",
            "analysis_scopes_empty": "Analysis scopes are empty! Check if frontend correctly passed analysisScopes",
            "received_user_tool_selection": "Received user tool selection",
            "received_data_source_selection": "Received data source selection",
            "received_language_setting": "Received language setting",
            "start_mapping_analysis_scopes": "Start mapping analysis scopes",
            "received_scope_details": "Received scope details",
            "single_scope": "Single scope",
            "analysis_scopes_empty_warning": "Analysis scopes are empty, will result in no analysts being selected",
            "convert_string_to_list": "Convert string to list",
            "invalid_analysis_scopes_type": "Invalid analysis scopes type",
            "scope_to_analysts": "Scope to analysts",
            "unrecognized_analysis_scope": "Unrecognized analysis scope, skipping",
            "mapping_complete": "Mapping complete: analysts selected",
            "execution_order_adjustment": "Execution order adjustment",
            "analysis_scope_mapping": "Analysis scope mapping",
            "analysts_list_empty": "Analysts list is empty!",
            "check_frontend_scope_selection": "Please check if frontend correctly selected analysis scopes",
            "whentradegraph_init_failed": "WhenTradeGraph initialization failed",
            "unknown_error_creating_graph": "Unknown error occurred while creating analysis graph",
            "tool_config_passed_to_graph": "Tool configuration passed to analysis graph",
            "initial_state_check": "Initial state check",
            "state_validation_complete": "State validation complete",
            "using_analysis_timeframe": "Using analysis timeframe",
            "using_langgraph_stream_mode": "Using LangGraph stream mode",
            "phase1_nodes_from_selected_analysts": "Phase 1 nodes from selected analysts",
            "execute_complete_5phase_process": "Execute complete 5-phase process, analysis scopes",
            "built_execution_phases": "Built execution phases",
            "initialize_agent_state": "Initialize Agent state based on phases",
            "initialize_agent_to_idle": "Initialize agent to idle",
            "initialized_agents": "Initialized agents",
            "analysis_started_first_agent": "Analysis started, first Agent status: idle → processing",
            "no_valid_first_agent": "No valid first Agent node found",
            "start_langgraph_stream": "Start LangGraph stream, using updates mode",
            "received_stop_signal": "Received stop signal, interrupt stream processing",
            "received_chunk": "Received chunk",
            "stream_complete": "Stream complete, received chunks",
            "stream_execution_failed": "Stream execution failed",
            "set_stop_event_for_task": "Set stop event for task",
            "stream_cancelled": "Stream cancelled",
            "stream_error": "Stream error",
            "chunk_structure": "Chunk structure",
            "update_global_debate_count": "Update global debate_count",
            "update_global_risk_count": "Update global risk_count",
            "node_complete_data_structure": "Node complete data structure",
            "data_type": "Data type",
            "dict_keys": "Dictionary keys",
            "direct_content": "Direct content",
            "tool_notification": "Tool notification",
            "risk_phase_node_activated": "Risk phase node activated",
            "risk_phase_current_global_count": "Risk phase current global risk_count",
            "risk_phase_contains_risk_debate_state": "Risk phase current_chunk_state contains risk_debate_state",
            "agent_status_processing_to_completed": "Agent status: processing → completed (about to start)",
            "agent_status_to_processing": "Agent status: to processing",
            "agent_status_processing_to_completed_through": "Agent status: processing → completed (through)",
            "phase1_agent_order": "Phase 1 Agent order (extracted from actual nodes)",
            "phase1_complete_activate_phase2": "Phase 1 complete, activate Phase 2 Agent status: to processing",
            "activate_next_agent": "Activate next Agent status: to processing",
            "msg_clear_bull_debate_count": "Msg Clear Bull debate count (global), max rounds, threshold",
            "msg_clear_bull_debate_end": "Msg Clear Bull debate end → Research Manager",
            "msg_clear_bull_continue_debate": "Msg Clear Bull continue debate → Bear Researcher (round)",
            "activate_next_agent_status": "Activate next Agent status: to processing",
            "msg_clear_bull_cannot_activate": "Msg Clear Bull cannot activate",
            "next_agent_exists": "next_agent exists",
            "next_agent_value": "next_agent value",
            "in_agent_status": "in agent_status",
            "current_status": "current status",
            "status_is_valid": "status is valid",
            "agent_status_content": "agent_status content",
            "msg_clear_bear_debug_global_count": "Msg Clear Bear DEBUG global debate_count",
            "msg_clear_bear_debug_chunk_count": "Msg Clear Bear DEBUG chunk_count, updated debate_count",
            "msg_clear_bear_using_global_count": "Msg Clear Bear using global debate_count"
        },
        
        # 技术指标相关
        "technical": {
            "coingecko_judgment": "CoinGecko judgment: date range, span days, interval",
            "coingecko_processing_5min": "CoinGecko processing 5-minute data request: symbol, range days",
            "coingecko_success": "CoinGecko successfully obtained data: data points, interval",
            "volume_processed": "Volume column processed",
            "yfinance_volume_success": "YFinance Volume data obtained successfully, average volume",
            "yfinance_volume_missing": "YFinance Volume data missing or all NaN",
            "yfinance_obtaining": "YFinance obtaining data, original interval",
            "attempt_interval": "Attempt: interval, time range to",
            "obtained_data_points": "Obtained data points",
            "yfinance_downgrade": "YFinance downgrade: interval → interval, data points",
            "yfinance_original_success": "YFinance original interval successful: interval, data points",
            "last_attempt_insufficient": "Last attempt interval, data points insufficient but still return result",
            "interval_still_insufficient": "Interval data points still insufficient, continue downgrade",
            "interval_failed": "Interval acquisition failed",
            "yfinance_all_downgrades_failed": "YFinance all downgrade attempts failed",
            "obtaining_price_data": "Obtaining price data for technical indicator calculation",
            "indicators_need_data_points": "Indicators need data points",
            "short_term_1_2_days": "Short-term analysis (1-2 days): using interval, obtaining days data",
            "short_term_1_week": "Short-term analysis (1 week): using interval, obtaining days data",
            "medium_term_1_month": "Medium-term analysis (1 month): using interval, obtaining days data",
            "long_term_1_year_plus": "Long-term analysis (1 year+): using interval, obtaining days data",
            "actually_obtaining_data": "Actually obtaining data: from to, interval",
            "reusing_obtained_data": "Reusing obtained price data for technical indicator calculation",
            "price_data_format_check": "price_data format check: data field, prices field, data source",
            "yfinance_data_length": "YFinance data length",
            "coingecko_data_length": "CoinGecko data length",
            "using_yfinance_data": "Using YFinance data, data points",
            "detected_coingecko_dict": "Detected CoinGecko dictionary format data: data points",
            "detected_coingecko_nested": "Detected CoinGecko nested list format data: data points",
            "detected_volume_data": "Detected volume data: data points",
            "no_valid_volume_data": "No valid volume data obtained, setting to 0",
            "volume_data_success": "Successfully obtained volume data, average volume",
            "data_quality_issues": "Data quality issues: NaN values, Inf values (total data points)",
            "close_first_5": "Close column first 5 values",
            "close_last_5": "Close column last 5 values",
            "data_cleaning": "Data cleaning: removed invalid data points, remaining",
            "fatal_error_all_cleaned": "Fatal error: all data points were cleaned, possible data format issue",
            "cleaned_data_points": "Cleaned data points (original), start calculating technical indicators",
            "sma20_calculation_failed": "SMA20 calculation failed: insufficient data (points)",
            "sma20_calculation_success": "SMA20 calculation successful",
            "ema26_calculation_failed": "EMA26 calculation failed: insufficient data (points)",
            "ema26_calculation_success": "EMA26 calculation successful",
            "ema12_calculation_failed": "EMA12 calculation failed: insufficient data (points)",
            "ema12_calculation_success": "EMA12 calculation successful",
            "rsi_calculation_failed": "RSI calculation failed: insufficient data (points)",
            "rsi_calculation_success": "RSI calculation successful",
            "macd_calculation_failed": "MACD calculation failed: insufficient data (points)",
            "macd_calculation_success": "MACD calculation successful",
            "bollinger_calculation_failed": "Bollinger Bands calculation failed: insufficient data (points)",
            "bollinger_calculation_success": "Bollinger Bands calculation successful: upper band, lower band",
            "technical_indicator_warnings": "Technical indicator calculation warnings",
            "yfinance_volume_added": "YFinance volume data added: total volume, latest 24h, data points",
            "yfinance_volume_empty": "YFinance data Volume column is empty or all 0",
            "coingecko_volume_added": "CoinGecko volume data added: total volume, latest 24h, data points",
            "coingecko_volume_empty": "CoinGecko volume data is empty",
            "no_volumes_or_data_field": "price_data has neither volumes field nor Volume column in data field",
            "price_data_empty": "price_data is empty",
            "successfully_calculated_indicators": "Successfully calculated technical indicators"
        },
        
        # 通用状态
        "status": {
            "success": "Success",
            "failed": "Failed",
            "error": "Error",
            "warning": "Warning",
            "info": "Info",
            "debug": "Debug",
            "loading": "Loading",
            "completed": "Completed",
            "cancelled": "Cancelled",
            "timeout": "Timeout",
            "retry": "Retry",
            "skipped": "Skipped",
            "pending": "Pending",
            "processing": "Processing",
            "idle": "Idle"
        }
    },
    
    "zh-CN": {
        # 系统启动和初始化
        "system": {
            "startup": "系统启动中...",
            "shutdown": "系统关闭中...",
            "initialization_complete": "初始化完成",
            "initialization_failed": "初始化失败",
            "service_started": "服务已启动",
            "service_stopped": "服务已停止",
            "configuration_loaded": "配置已加载",
            "configuration_failed": "配置加载失败"
        },
        
        # 缓存相关
        "cache": {
            "hit": "缓存命中",
            "miss": "缓存未命中",
            "saved": "缓存已保存",
            "cleared": "缓存已清理",
            "prewarming": "缓存预热中",
            "prewarming_complete": "缓存预热完成",
            "prewarming_failed": "缓存预热失败",
            "cleanup_complete": "缓存清理完成",
            "cleanup_failed": "缓存清理失败",
            "user_cached": "缓存用户信息",
            "user_retrieved": "从缓存获取用户",
            "user_cleared": "清除用户缓存",
            "task_cached": "缓存分析任务",
            "task_retrieved": "从缓存获取分析任务",
            "task_cleared": "清除任务缓存",
            "report_cached": "缓存分析报告",
            "report_retrieved": "从缓存获取分析报告",
            "market_data_cached": "缓存市场数据",
            "user_stats_cached": "缓存用户统计",
            "batch_cached": "批量缓存任务",
            "batch_cleared": "批量清除用户缓存",
            "sync_complete": "数据同步完成",
            "sync_failed": "数据同步失败",
            "hit_rate_low": "缓存命中率较低",
            "optimization_complete": "缓存优化完成"
        },
        
        # 数据库相关
        "database": {
            "connected": "数据库已连接",
            "disconnected": "数据库已断开",
            "connection_failed": "数据库连接失败",
            "query_slow": "检测到慢查询",
            "deadlock_detected": "检测到数据库死锁",
            "optimization_complete": "数据库优化完成",
            "maintenance_complete": "数据库维护完成",
            "maintenance_failed": "数据库维护失败",
            "stats_updated": "数据库统计信息更新完成",
            "cache_cleared": "查询缓存已清理",
            "pool_usage_high": "连接池使用率高",
            "pool_overflow": "连接池溢出",
            "engine_created": "创建优化数据库引擎",
            "engine_closed": "已关闭数据库引擎",
            "health_check_failed": "连接池健康检查失败",
            "connection_invalid": "数据库连接失效"
        },
        
        # API和网络相关
        "api": {
            "rate_limit": "速率限制：等待",
            "rate_limit_detected": "检测到速率限制错误",
            "pro_endpoint_restricted": "Pro API端点访问限制",
            "api_key_issue": "API密钥问题",
            "request_failed": "API调用失败",
            "request_success": "API调用成功",
            "fallback_switching": "故障转移：切换到备用数据源",
            "fallback_success": "故障转移：备用数据源成功",
            "fallback_failed": "故障转移：备用数据源也失败",
            "no_fallback": "故障转移：无备用数据源，分析停止",
            "primary_success": "故障转移：主数据源成功",
            "primary_failed": "故障转移：主数据源失败",
            "cache_cleared": "已清空API缓存",
            "interval_control": "API间隔控制：等待",
            "stop_signal_received": "收到停止信号，中断执行",
            "execution_interrupted": "执行被中断"
        },
        
        # 分析和处理相关
        "analysis": {
            "started": "分析开始",
            "completed": "分析完成",
            "failed": "分析失败",
            "cancelled": "分析已取消",
            "progress_updated": "更新任务进度",
            "report_generated": "分析报告已生成",
            "scope_mapping": "开始映射分析范围",
            "scope_unrecognized": "未识别的分析范围，跳过",
            "agents_selected": "个分析师被选择",
            "no_agents_selected": "分析师列表为空！",
            "execution_order_adjusted": "执行顺序调整",
            "graph_initialized": "分析图初始化成功",
            "graph_failed": "分析图初始化失败",
            "phase_activated": "阶段已激活",
            "agent_status_updated": "Agent状态更新",
            "tool_called": "工具调用通知",
            "debate_count_updated": "更新全局debate_count",
            "risk_count_updated": "更新全局risk_count",
            "stream_started": "开始LangGraph stream，使用updates模式",
            "stream_completed": "Stream完成，共收到个chunks",
            "stream_failed": "Stream执行失败",
            "stream_cancelled": "Stream被取消",
            "chunk_received": "收到chunk",
            "stop_event_set": "已为任务设置停止事件"
        },
        
        # 工具相关
        "tools": {
            "optimizer_initialized": "工具调用优化器初始化完成",
            "optimizer_started": "工具调用优化器已启动",
            "optimizer_stopped": "工具调用优化器已停止",
            "call_submitted": "工具调用已提交",
            "call_completed": "工具调用完成",
            "call_failed": "工具调用失败",
            "call_executing": "开始执行工具调用",
            "work_loop_cancelled": "工具调用优化器工作循环已取消",
            "work_loop_error": "工具调用优化器工作循环异常",
            "status_notification": "工具状态通知",
            "status_notification_failed": "发送工具状态通知失败"
        },
        
        # LLM相关
        "llm": {
            "token_tracking_enabled": "Token跟踪功能已启用",
            "token_tracking_disabled": "Token跟踪功能未启用",
            "token_estimated": "使用估算token",
            "token_actual": "实际token使用",
            "cost_calculated": "本次调用成本",
            "cost_zero_warning": "成本计算为0，可能配置有问题",
            "usage_record_created": "已创建使用记录",
            "usage_record_failed": "未创建使用记录",
            "token_stats_failed": "Token统计失败",
            "call_failed": "调用失败",
            "chat_request_failed": "LLM聊天完成请求失败",
            "stream_parse_failed": "无法解析流式响应",
            "stream_request_failed": "LLM流式聊天请求失败",
            "api_key_missing": "未设置，聊天功能将不可用",
            "providers_unavailable": "后端没有可用的LLM提供商，无法进行分析",
            "availability_check_failed": "LLM可用性检查失败",
            "detection_api_unavailable": "后端LLM检测API不可用，使用本地检测",
            "detection_failed": "LLM检测失败，使用默认配置",
            "detection_completed": "LLM检测完成，可用提供商",
            "model_list_failed": "无法获取的模型列表，使用默认配置",
            "provider_translation_failed": "获取提供商翻译失败",
            "model_list_request_failed": "获取模型列表失败"
        },
        
        # 任务和队列相关
        "task": {
            "added_to_queue": "任务已添加到队列",
            "concurrency_limit": "任务达到并发限制，等待...",
            "timeout": "任务超时",
            "execution_failed": "任务执行失败",
            "retry": "任务重试",
            "started": "任务开始执行",
            "completed": "任务完成",
            "queue_error": "处理任务队列异常",
            "result_failed": "获取任务结果失败",
            "queue_closing": "关闭任务队列...",
            "queue_closed": "任务队列已关闭",
            "template_registered": "注册任务模板",
            "optimization_rule_failed": "应用优化规则失败",
            "optimized_submitted": "任务已优化并提交",
            "optimizer_started": "任务优化器已启动",
            "queue_backlog": "任务队列积压",
            "execution_time_long": "平均任务执行时间过长",
            "queue_stats": "任务队列统计",
            "performance_monitoring_error": "任务性能监控异常",
            "optimizer_closing": "关闭任务优化器...",
            "optimizer_closed": "任务优化器已关闭",
            "batch_completed": "批次处理完成",
            "batch_failed": "批次处理失败"
        },
        
        # 备份相关
        "backup": {
            "s3_client_initialized": "S3备份客户端初始化成功",
            "s3_client_failed": "S3备份客户端初始化失败",
            "boto3_unavailable": "boto3未安装，S3备份功能不可用",
            "postgresql_started": "开始备份PostgreSQL数据库...",
            "redis_started": "开始备份Redis缓存...",
            "config_started": "开始备份配置文件...",
            "completed": "备份完成",
            "failed": "备份失败",
            "postgresql_success": "PostgreSQL备份成功",
            "postgresql_failed": "PostgreSQL备份失败",
            "postgresql_error": "PostgreSQL备份异常",
            "redis_client_uninitialized": "Redis客户端未初始化，跳过Redis备份",
            "redis_key_failed": "备份Redis键失败",
            "redis_success": "Redis备份成功",
            "redis_error": "Redis备份异常",
            "config_success": "配置备份成功",
            "config_error": "配置备份异常",
            "s3_upload_success": "文件上传到S3成功",
            "s3_upload_completed": "备份上传S3完成",
            "s3_upload_failed": "S3上传失败",
            "old_backup_deleted": "删除旧备份",
            "old_backup_delete_failed": "删除旧备份失败",
            "cleanup_error": "清理旧备份异常",
            "s3_old_backup_deleted": "删除S3旧备份",
            "s3_cleanup_error": "清理S3旧备份异常",
            "manifest_read_failed": "读取备份清单失败",
            "s3_list_failed": "列出S3备份失败",
            "list_error": "列出备份异常",
            "s3_list_error": "列出S3备份异常",
            "restore_completed": "备份恢复完成",
            "restore_failed": "备份恢复失败",
            "postgresql_restore_manual": "PostgreSQL恢复功能需要手动实现",
            "postgresql_restore_error": "PostgreSQL恢复异常",
            "redis_client_uninitialized_restore": "Redis客户端未初始化",
            "redis_restore_completed": "Redis数据恢复完成，恢复键数量",
            "redis_restore_error": "Redis恢复异常",
            "config_restore_info": "配置备份信息",
            "config_restore_completed": "配置恢复完成（仅供参考）",
            "config_restore_error": "配置恢复异常",
            "s3_download_completed": "从S3下载备份完成",
            "s3_download_failed": "从S3下载备份失败",
            "next_backup_time": "下次备份时间",
            "scheduled_backup_started": "开始定时备份...",
            "scheduled_backup_completed": "定时备份完成",
            "scheduled_backup_failed": "定时备份失败",
            "scheduled_backup_error": "定时备份异常"
        },
        
        # 监控相关
        "monitoring": {
            "slow_request": "慢请求",
            "slow_query": "慢查询",
            "cpu_usage_high": "CPU使用率过高",
            "memory_usage_high": "内存使用率过高",
            "record_metrics_failed": "记录系统指标失败",
            "cache_hit_rate_low": "缓存命中率偏低",
            "slow_query_analysis_failed": "分析慢查询失败",
            "table_stats_failed": "获取表统计失败",
            "index_usage_failed": "获取索引使用情况失败",
            "performance_analysis_failed": "性能分析失败",
            "db_stats_updated": "数据库统计信息更新完成",
            "db_connection_optimization_failed": "优化数据库连接失败",
            "cache_prewarming_completed": "缓存预热完成",
            "cache_prewarming_failed": "缓存预热失败",
            "performance_summary": "性能摘要",
            "performance_monitoring_error": "性能监控异常"
        },
        
        # 新闻和数据相关
        "news": {
            "search_failed": "搜索失败",
            "found_articles": "搜索到条关于的新闻",
            "analysis_failed": "新闻分析失败",
            "summary_generation_failed": "生成总结报告失败",
            "service_initialized": "CryptoSwarmNewsService 初始化完成",
            "analysis_started": "开始获取的新闻分析",
            "search_agent_started": "搜索代理开始工作",
            "no_news_found": "未找到关于的新闻",
            "analysis_agent_started": "分析代理开始工作，处理条新闻",
            "summary_agent_generating": "总结代理生成最终报告",
            "analysis_report_generated": "成功生成的新闻分析报告",
            "crypto_news_analysis_failed": "获取加密货币新闻分析失败",
            "connection_test_failed": "连接测试失败"
        },
        
        # 数据文件相关
        "data": {
            "file_not_exists": "数据文件不存在",
            "check_data_directory": "请确保已下载相关数据或检查数据目录配置",
            "file_not_found": "文件未找到",
            "json_parse_error": "JSON解析错误",
            "read_error": "读取数据文件时发生错误",
            "connection_timeout": "连接超时"
        },
        
        # Agent映射相关
        "agent_mapping": {
            "market_enum_default": "market_enum (默认)",
            "available_agent_keys": "可用的agent映射键",
            "check_scope": "检查scope",
            "found_agents_for_scope": "找到个agents for scope",
            "add_agent": "添加agent",
            "scope_not_found": "scope未找到对应的agents",
            "final_selected_agents": "最终选择的agents",
            "no_matching_agents": "没有找到匹配的agents，使用默认配置",
            "organizing_crypto_agents": "组织加密市场agents",
            "analyst_team_will_include": "analyst团队将包含个agents",
            "final_organization_result": "最终组织结果"
        },
        
        # 协作相关
        "collaboration": {
            "started": "协作开始",
            "not_found": "未找到协作"
        },
        
        # WebSocket相关
        "websocket": {
            "not_connected": "WebSocket未连接，需要先通过connectWithAuth方法建立连接",
            "analysis_id_empty": "subscribeToAnalysis: analysisId不能为空",
            "subscribe_message_sent": "订阅分析任务的更新, 消息ID",
            "subscribe_message_failed": "发送订阅消息失败",
            "heartbeat_failed": "心跳发送失败",
            "empty_message_ignored": "收到空消息，忽略处理",
            "json_parse_failed": "JSON解析失败",
            "message_format_error": "消息格式错误：期望字典，实际",
            "message_missing_type": "消息缺少type字段",
            "dev_mode_analysis_id": "Dev mode: 生成新的analysis_id",
            "deprecated_analysis_start": "收到已废弃的analysis.start消息，应该使用REST API创建任务",
            "websocket_disconnected": "WebSocket断开连接",
            "websocket_error": "WebSocket错误",
            "forward_redis_message": "转发Redis消息到WebSocket",
            "forward_message_failed": "转发消息失败",
            "created_independent_subscriber": "创建独立订阅器，已订阅频道",
            "using_subscription_message_params": "直接使用订阅消息参数",
            "subscription_missing_symbol": "订阅消息缺少必要参数 'symbol'",
            "received_complete_params": "接收到的完整参数",
            "top_level_keys": "顶层keys",
            "analysis_scopes_position_check": "analysis_scopes位置检查",
            "using_llm_config": "使用LLM配置",
            "received_analysis_scopes": "接收到的分析范围",
            "analysis_scopes_empty": "分析范围为空！检查前端是否正确传递了analysisScopes",
            "received_user_tool_selection": "接收到用户工具选择",
            "received_data_source_selection": "接收到数据源选择",
            "received_language_setting": "接收到的语言设置",
            "start_mapping_analysis_scopes": "开始映射分析范围",
            "received_scope_details": "接收到的范围详情",
            "single_scope": "单个范围",
            "analysis_scopes_empty_warning": "分析范围为空，将导致没有分析师被选择",
            "convert_string_to_list": "将字符串转换为列表",
            "invalid_analysis_scopes_type": "无效的分析范围类型",
            "scope_to_analysts": "范围→分析师",
            "unrecognized_analysis_scope": "未识别的分析范围，跳过",
            "mapping_complete": "映射完成：个分析师被选择",
            "execution_order_adjustment": "执行顺序调整",
            "analysis_scope_mapping": "分析范围映射",
            "analysts_list_empty": "分析师列表为空！",
            "check_frontend_scope_selection": "请检查前端是否正确选择了分析范围",
            "whentradegraph_init_failed": "WhenTradeGraph初始化失败",
            "unknown_error_creating_graph": "创建分析图时发生未知错误",
            "tool_config_passed_to_graph": "工具配置已传递到分析图",
            "initial_state_check": "初始状态检查",
            "state_validation_complete": "状态验证完成",
            "using_analysis_timeframe": "使用分析timeframe",
            "using_langgraph_stream_mode": "使用LangGraph stream模式",
            "phase1_nodes_from_selected_analysts": "第一阶段节点 (来自selected_analysts",
            "execute_complete_5phase_process": "执行完整的5阶段流程，分析范围",
            "built_execution_phases": "构建了个执行阶段",
            "initialize_agent_state": "初始化Agent状态，基于个阶段",
            "initialize_agent_to_idle": "初始化→idle",
            "initialized_agents": "已初始化个Agent",
            "analysis_started_first_agent": "分析开始，第一个Agent状态: idle → processing",
            "no_valid_first_agent": "没有找到第一个有效的Agent节点",
            "start_langgraph_stream": "开始LangGraph stream，使用updates模式",
            "received_stop_signal": "收到停止信号，中断stream处理",
            "received_chunk": "收到chunk",
            "stream_complete": "Stream完成，共收到个chunks",
            "stream_execution_failed": "Stream执行失败",
            "set_stop_event_for_task": "已为任务设置停止事件",
            "stream_cancelled": "Stream被取消",
            "stream_error": "Stream错误",
            "chunk_structure": "Chunk结构",
            "update_global_debate_count": "更新全局debate_count",
            "update_global_risk_count": "更新全局risk_count",
            "node_complete_data_structure": "节点的完整数据结构",
            "data_type": "数据类型",
            "dict_keys": "字典keys",
            "direct_content": "直接内容",
            "tool_notification": "工具通知调用",
            "risk_phase_node_activated": "Risk阶段节点被激活",
            "risk_phase_current_global_count": "Risk阶段当前全局risk_count",
            "risk_phase_contains_risk_debate_state": "Risk阶段current_chunk_state包含risk_debate_state",
            "agent_status_processing_to_completed": "Agent状态: processing → completed (即将开始)",
            "agent_status_to_processing": "Agent状态: → processing",
            "agent_status_processing_to_completed_through": "Agent状态: processing → completed (通过)",
            "phase1_agent_order": "第一阶段Agent顺序（从实际节点提取）",
            "phase1_complete_activate_phase2": "第一阶段完成，激活第二阶段Agent状态: → processing",
            "activate_next_agent": "激活下一个Agent状态: → processing",
            "msg_clear_bull_debate_count": "Msg Clear Bull辩论计数: (全局), 最大轮数, 阈值",
            "msg_clear_bull_debate_end": "Msg Clear Bull辩论结束 → Research Manager",
            "msg_clear_bull_continue_debate": "Msg Clear Bull继续辩论 → Bear Researcher (轮)",
            "activate_next_agent_status": "激活下一个Agent状态: → processing",
            "msg_clear_bull_cannot_activate": "Msg Clear Bull无法激活",
            "next_agent_exists": "next_agent存在",
            "next_agent_value": "next_agent值",
            "in_agent_status": "在agent_status中",
            "current_status": "当前状
"""Create user and auth tables

Revision ID: ad760e705316
Revises: 
Create Date: 2025-07-29 03:37:34.472664

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ad760e705316'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('wallet_address', sa.String(length=255), nullable=True),
    sa.Column('username', sa.String(length=100), nullable=True),
    sa.Column('display_name', sa.String(length=255), nullable=True),
    sa.Column('avatar_url', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.Column('language', sa.String(length=10), nullable=True),
    sa.Column('timezone', sa.String(length=50), nullable=True),
    sa.Column('preferences', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_index(op.f('ix_users_wallet_address'), 'users', ['wallet_address'], unique=True)
    op.create_table('ai_usage',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('model_name', sa.String(length=100), nullable=False),
    sa.Column('provider', sa.String(length=50), nullable=False),
    sa.Column('input_tokens', sa.Integer(), nullable=False),
    sa.Column('output_tokens', sa.Integer(), nullable=False),
    sa.Column('total_tokens', sa.Integer(), nullable=False),
    sa.Column('cost_amount', sa.DECIMAL(precision=20, scale=6), nullable=False),
    sa.Column('cost_currency', sa.String(length=10), nullable=False),
    sa.Column('usage_type', sa.String(length=50), nullable=False),
    sa.Column('context_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_ai_usage_created_at', 'ai_usage', ['created_at'], unique=False)
    op.create_index('idx_ai_usage_model', 'ai_usage', ['model_name'], unique=False)
    op.create_index('idx_ai_usage_type', 'ai_usage', ['usage_type'], unique=False)
    op.create_index('idx_ai_usage_user_created', 'ai_usage', ['user_id', 'created_at'], unique=False)
    op.create_index('idx_ai_usage_user_id', 'ai_usage', ['user_id'], unique=False)
    op.create_table('payments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('amount', sa.DECIMAL(precision=20, scale=6), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('credits_added', sa.DECIMAL(precision=20, scale=6), nullable=False),
    sa.Column('payment_method', sa.String(length=50), nullable=False),
    sa.Column('transaction_id', sa.String(length=255), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('payment_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_payments_created_at', 'payments', ['created_at'], unique=False)
    op.create_index('idx_payments_status', 'payments', ['status'], unique=False)
    op.create_index('idx_payments_user_id', 'payments', ['user_id'], unique=False)
    op.create_index('idx_payments_user_status', 'payments', ['user_id', 'status'], unique=False)
    op.create_index(op.f('ix_payments_transaction_id'), 'payments', ['transaction_id'], unique=True)
    op.create_table('subscriptions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('plan_type', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('start_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('end_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('features', sa.JSON(), nullable=True),
    sa.Column('auto_renew', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_subscriptions_end_date', 'subscriptions', ['end_date'], unique=False)
    op.create_index('idx_subscriptions_status', 'subscriptions', ['status'], unique=False)
    op.create_index('idx_subscriptions_user_id', 'subscriptions', ['user_id'], unique=False)
    op.create_table('user_credits',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('balance', sa.DECIMAL(precision=20, scale=6), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('daily_limit', sa.DECIMAL(precision=20, scale=6), nullable=False),
    sa.Column('monthly_limit', sa.DECIMAL(precision=20, scale=6), nullable=False),
    sa.Column('total_spent', sa.DECIMAL(precision=20, scale=6), nullable=False),
    sa.Column('daily_spent', sa.DECIMAL(precision=20, scale=6), nullable=False),
    sa.Column('monthly_spent', sa.DECIMAL(precision=20, scale=6), nullable=False),
    sa.Column('daily_reset_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('monthly_reset_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('analysis_tasks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('task_type', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('market_type', sa.String(length=50), nullable=False),
    sa.Column('symbol', sa.String(length=50), nullable=False),
    sa.Column('parameters', sa.JSON(), nullable=True),
    sa.Column('result_data', sa.JSON(), nullable=True),
    sa.Column('error_message', sa.String(), nullable=True),
    sa.Column('ai_usage_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['ai_usage_id'], ['ai_usage.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_analysis_tasks_created_at', 'analysis_tasks', ['created_at'], unique=False)
    op.create_index('idx_analysis_tasks_status', 'analysis_tasks', ['status'], unique=False)
    op.create_index('idx_analysis_tasks_symbol', 'analysis_tasks', ['symbol'], unique=False)
    op.create_index('idx_analysis_tasks_user_id', 'analysis_tasks', ['user_id'], unique=False)
    op.create_index('idx_analysis_tasks_user_status', 'analysis_tasks', ['user_id', 'status'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_analysis_tasks_user_status', table_name='analysis_tasks')
    op.drop_index('idx_analysis_tasks_user_id', table_name='analysis_tasks')
    op.drop_index('idx_analysis_tasks_symbol', table_name='analysis_tasks')
    op.drop_index('idx_analysis_tasks_status', table_name='analysis_tasks')
    op.drop_index('idx_analysis_tasks_created_at', table_name='analysis_tasks')
    op.drop_table('analysis_tasks')
    op.drop_table('user_credits')
    op.drop_index('idx_subscriptions_user_id', table_name='subscriptions')
    op.drop_index('idx_subscriptions_status', table_name='subscriptions')
    op.drop_index('idx_subscriptions_end_date', table_name='subscriptions')
    op.drop_table('subscriptions')
    op.drop_index(op.f('ix_payments_transaction_id'), table_name='payments')
    op.drop_index('idx_payments_user_status', table_name='payments')
    op.drop_index('idx_payments_user_id', table_name='payments')
    op.drop_index('idx_payments_status', table_name='payments')
    op.drop_index('idx_payments_created_at', table_name='payments')
    op.drop_table('payments')
    op.drop_index('idx_ai_usage_user_id', table_name='ai_usage')
    op.drop_index('idx_ai_usage_user_created', table_name='ai_usage')
    op.drop_index('idx_ai_usage_type', table_name='ai_usage')
    op.drop_index('idx_ai_usage_model', table_name='ai_usage')
    op.drop_index('idx_ai_usage_created_at', table_name='ai_usage')
    op.drop_table('ai_usage')
    op.drop_index(op.f('ix_users_wallet_address'), table_name='users')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
